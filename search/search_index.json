{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Documenta\u00e7\u00e3o de Projeto Data Quality","text":"<p>Documenta\u00e7\u00e3o produzida utilizando o MkDocs, se deseja saber mais acesse mkdocs.org.</p> <p>Este projeto de Data Quality foi desenvolvido ap\u00f3s Workshop do Luciano Vasconcelos Filho.</p> <p>GitHub do Projeto: Deputados-LuhBorba Documenta\u00e7\u00e3o do Projeto: Documentacao Portif\u00f3lio Pessoal: Portif\u00f3lio</p>"},{"location":"#stack-do-projeto","title":"Stack do Projeto","text":"<ul> <li>python</li> <li>streamlit</li> <li>selenium</li> <li>pytest</li> <li>taskipy</li> <li>pydantic</li> <li>openpyxl</li> <li>mkdocs</li> <li>mkdocstrings</li> <li>mkdocs-material</li> </ul>"},{"location":"#proposta-do-projeto","title":"Proposta do Projeto","text":"<p>O projeto tem como objetivo realizar um processo de valida\u00e7\u00e3o de estrutura de uma planilha no Excel, considerando que hoje no mundo corporativo esta \u00e9 uma ferramenta amplamente usada, assim buscando defini\u00e7\u00f5es padr\u00f5es para envios de dados considerando um estrutura de contrato pre-definida.</p> <p>A abordagem utilizada \u00e9 criar um App no Streamlit que realize todo processo de valida\u00e7\u00e3o, ferramenta com cria\u00e7\u00e3o de testes, buscando assim um qualidade no dado enviado.</p>"},{"location":"#estrutura-do-projeto","title":"Estrutura do Projeto","text":"<p>O projeto est\u00e1 basicamente dividido em 4 (quatro) arquivos, todos eles dentro da pasta <code>src</code>.</p> <ul> <li>app.py</li> <li>backend.py</li> <li>contrato.py</li> <li>frontend.py</li> </ul>"},{"location":"#contrato-de-schema","title":"Contrato de Schema","text":"<p>Este aqui \u00e9 espec\u00edfico para o contrato de dados do case de vendas, trabalhado neste projeto.</p> <p>             Bases: <code>BaseModel</code></p> <p>Modelo de dados para Vendas</p> <p>Parameters:</p> Name Type Description Default <code>email</code> <code>str</code> <p>Email do comprador</p> required <code>data</code> <code>datetime</code> <p>Data da Compra</p> required <code>id_compra</code> <code>int</code> <p>Identificador da Compra</p> required <code>valor_compra</code> <code>float</code> <p>Valor da Compra</p> required <code>vendedor</code> <code>str</code> <p>Vendedor que realizou a compra</p> required Source code in <code>src/contrato.py</code> <pre><code>class Vendas(BaseModel):\n    \"\"\"\n    Modelo de dados para Vendas\n\n    Args:\n        email (str): Email do comprador\n        data (datetime): Data da Compra\n        id_compra (int): Identificador da Compra\n        valor_compra (float): Valor da Compra\n        vendedor (str): Vendedor que realizou a compra\n\n    \"\"\"\n    email: EmailStr\n    data: datetime\n    id_compra: PositiveInt\n    valor_compra: PositiveFloat\n    vendedor: VendedoresEnum\n\n    @field_validator('vendedor')\n    def vendedor_deve_estar_enum(cls, error):\n        return error\n</code></pre>"},{"location":"#apppy","title":"App.py","text":"<p>Aqui \u00e9 particularmente fa\u00e7o a uni\u00e3o entre o frontend e backend, carregando assim todas as valida\u00e7\u00f5es propostas no backend e trazendo todos os visuais carregados no frontend.</p> <pre><code># Importando Classe do Arquivo FrontEnd\nfrom frontend import ExcelValidadorUI\n# Importando Fun\u00e7\u00e3o do Arquivo BackEnd\nfrom backend import process_excel\n</code></pre> <p>Fun\u00e7\u00e3o especifica para interligar frontend e backend, de forma que o projeto tenha uma organiza\u00e7\u00e3o e padroniza\u00e7\u00e3o.</p> Source code in <code>src/app.py</code> <pre><code>def main():\n    ui = ExcelValidadorUI()\n    ui.display_header()\n\n    upload_file = ui.upload_file()\n\n    if upload_file:\n        result, error = process_excel(upload_file)\n        ui.display_result(result, error)\n</code></pre>"},{"location":"#frontendpy","title":"Frontend.py","text":"<p>Este arquivo \u00e9 para configura\u00e7\u00e3o do frontend da p\u00e1gina, assim deixando de forma separada do <code>app.py</code>.</p> <pre><code># Importando Streamlit\nimport streamlit as st\n</code></pre> Source code in <code>src/frontend.py</code> <pre><code>class ExcelValidadorUI:\n\n    def __init__(self):\n        self.set_page_config()\n\n    # Criando fun\u00e7\u00e3o para configura\u00e7\u00e3o das p\u00e1ginas\n    def set_page_config(self):\n        st.set_page_config(\n            page_title=\"Validador de Planilha\",\n            page_icon=\":snake:\"\n        )\n\n    # Criando fun\u00e7\u00e3o para Header da p\u00e1gina\n    def display_header(self):\n        st.title(\"Insira sua planilha para realizar a valida\u00e7\u00e3o!\")\n\n    # Criando fun\u00e7\u00e3o para o componente de file uploader\n    def upload_file(self):\n        return st.file_uploader(\"Carregue sua planilha\", type=[\"xlsx\"])\n\n    # Criando fun\u00e7\u00e3o especifica para mostragem de error\n    def display_result(self, result, error):\n        if error:\n            st.error(f\"Erro na valida\u00e7\u00e3o: {error}\")\n        else:\n            st.success(\"A planilha est\u00e1 correta\")\n</code></pre>"},{"location":"#backendpy","title":"Backend.py","text":"<p>Este arquivo \u00e9 para configura\u00e7\u00e3o do backend da p\u00e1gina, fazendo toda valida\u00e7\u00e3o dos arquivos 'xlsx'.</p> <pre><code># Importando Pandas\nimport pandas as pd\n# Importando classe de Vendas do arquivo de contratos.py\nfrom contrato import Vendas\n</code></pre> Source code in <code>src/backend.py</code> <pre><code>def process_excel(uploaded_file):\n    try:\n        df = pd.read_excel(uploaded_file)\n\n        # Verificando se h\u00e1 colunas extras\n        extras_cols = set(df.columns) - set(Vendas.model_fields.keys())\n        if extras_cols:\n            return False, f\"Existem mais colunas que o necess\u00e1rio: {', '.join(extras_cols)}\"\n\n        # Validar cada linha com o contrato\n        for index, row in df.iterrows():\n            try:\n                _ = Vendas(**row.to_dict())\n            except Exception as e:\n                raise ValueError(f\"Erro na linha {index + 2}: {e}\")\n\n        return True, None\n    except ValueError as ve:\n        return False, str(ve)\n    except Exception as e:\n        return False, f\"Erro Inesperado: {str(e)}\"\n</code></pre>"}]}